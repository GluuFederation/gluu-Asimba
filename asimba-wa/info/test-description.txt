	Asimba Integration Test: asimba-wa
==================================================

This project packages an Asimba distribution together with a series of 
Integration Tests that test a typical configuration of this distribution.

The aismba-wa src/main directory specifies the context of the running Asimba 
server instance, that is tested from the tests that are implemented in the 
src/test directory. 

This means that src/main/webapp/WEB-INF/conf/asimba-wa.xml is used to
configure asimba-wa. Configuring Asimba also means initializing the
database with a schema and load it with configuration data from 
src/main/resources/sql. 

The asimba-wa.properties file that specifies which configurationprovider to use, 
is configured in the init-property 'asimba.properties.file' that is set in the
startup-options of Jetty in Maven's pom.xml.

* Running the tests
There is a Maven default profile, that ensures that all the tests are run except for dev-specific 
tests. These dev-specific tests only make sense while debugging, as they make sure that the
post-integration phase is never reached, so the environment stays up, so it can be used as
server to make requests to.

Default startup (excludes Dev-tests)
	$ mvn clean verify

Startup that includes the dev-tests
	$ mvn -PdevIntegrationTests clean verify 

* Running the tests on 2 clustered Asimba servers
There is a special Maven cluster profile to run testcases on 2 local Asimba servers configured to use shared memory clustering with jGroups. Both sessions, TGT and SAML artifacts are configured to use 
the shared memory clustering.
	$ mvn clean verify -Pclustered
	
* Debug the running Jetty instance
Set Maven environment variable to include JVM debug settings, like:
	$ export MAVEN_OPTS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n
	$ mvn -PdevIntegrationTests clean verify
Now create a "Remote Java Application" as Debug Configuration, that attaches to the process on localhost port 8000.
It might be necessary to add source lookup locations. 

* Manual starting the configuration can be done as well:
	$ mvn inmemdb:run 
and either 
	$ mvn jetty:start (build war and deploy)
or
	$ mvn jetty:run (deploy existing war)
Once the database and server are running, individual testcases can be run from the IDE

	Extended information
==================================================

* Keystore Generation

 % keytool -genkeypair -keyalg RSA -alias "asimba-test" -keypass changeit -keystore asimba-test-keystore.jks -storepass changeit
What is your first and last name?
  [Unknown]:  Asimba Test Server
What is the name of your organizational unit?
  [Unknown]:  Lab
What is the name of your organization?
  [Unknown]:  Asimba
What is the name of your City or Locality?
  [Unknown]:  Zwolle
What is the name of your State or Province?
  [Unknown]:  OVR
What is the two-letter country code for this unit?
  [Unknown]:  NL
Is CN=Asimba Test Server, OU=Lab, O=Asimba, L=Zwolle, ST=OVR, C=NL correct?
  [no]:  yes


* Add RemoteSAML IDP certificate to the keystore used for testing
This is not the same one, instead it is located in src/test/resources.

% keytool -genkeypair -keyalg RSA -alias "asimba-test-idp" -keypass changeit -keystore asimba-integrationtest-keystore.jks -storepass changeit
What is your first and last name?
  [Unknown]:  Asimba Mock IDP
What is the name of your organizational unit?
  [Unknown]:  Lab
What is the name of your organization?
  [Unknown]:  Asimba
What is the name of your City or Locality?
  [Unknown]:  Zwolle
What is the name of your State or Province?
  [Unknown]:  OVR
What is the two-letter country code for this unit?
  [Unknown]:  NL
Is CN=Asimba Mock IDP, OU=Lab, O=Asimba, L=Zwolle, ST=OVR, C=NL correct?
  [no]:  y





* MySQL to Derby notes
When using TEXT-type to store byte[] (setBytes()), make column type:
TEXT -> LONG VARCHAR FOR BIT DATA



* Run Maven with verbose class loading feedback
On commandline, enter:
	$ MAVEN_OPTS="-verbose:class" mvn clean verify
This will let the Classloader show which classes are loaded at what time.



* Inspect Derby database contents
Use the command line tool 'ij' that can be found in the Apache Derby binary distribution:

	$ DERBY_HOME/bin/ij
	ij> connect 'jdbc:derby://localhost/memory:asimba-wa-db';
	